{
  "id": "BFS_20250920_00020",
  "version": "1.0",
  "lang": "ja",
  "task_family": "bfs_shortest",
  "answer_type": "int",
  "task": "bfs_shortest",
  "statement_ja": "無向グラフが与えられる。s から t への最短距離（辺数）を出力せよ。到達不能なら -1。",
  "io_spec": {
    "input": "n m s t\\n(u v)×m（1-indexed, 無向）",
    "output": "最短距離または -1"
  },
  "instance": {
    "seed": 20,
    "template_id": "BFS_T1",
    "params": {
      "n": 12
    }
  },
  "tests": [
    {
      "in": "12 24 11 10\n3 7\n4 6\n8 12\n1 6\n9 11\n1 3\n4 5\n5 6\n3 6\n5 9\n9 10\n1 2\n10 11\n1 11\n7 9\n6 7\n6 10\n3 5\n3 8\n5 8\n9 12\n1 4\n2 3\n1 7\n",
      "out": "1\n"
    },
    {
      "in": "12 19 1 9\n4 6\n8 9\n9 11\n10 12\n4 5\n5 6\n3 6\n8 11\n9 10\n2 4\n1 2\n10 11\n7 9\n3 5\n1 4\n2 3\n11 12\n7 11\n7 8\n",
      "out": "-1\n"
    }
  ],
  "reference": {
    "py": "ref/py/bfs_shortest.py"
  },
  "hints": [
    {
      "level": 1,
      "text": "無重みグラフの最短路は BFS で求まる。"
    },
    {
      "level": 2,
      "text": "dist 配列を -1 で初期化し、dist[s]=0。未訪問のみキューに入れる。"
    },
    {
      "level": 3,
      "text": "隣接 to の距離は dist[v]+1。t に到達したら距離が答え。"
    }
  ],
  "distractors": [
    {
      "code": "VISIT_MARK_LATE",
      "desc": "訪問印を遅く付けて多重プッシュ"
    },
    {
      "code": "OFF_BY_ONE",
      "desc": "距離 +1 や初期値の扱いを誤る"
    },
    {
      "code": "INDEX_BASE_MISMATCH",
      "desc": "1-indexed/0-indexed を取り違え"
    }
  ],
  "witness": {
    "shortest_len_t1": 1,
    "shortest_len_t2": -1
  },
  "difficulty": {
    "score": 0.4,
    "basis": "BFS on unweighted graph"
  },
  "tags": [
    "graph",
    "simulation",
    "beginner"
  ],
  "license": "CC BY-SA 4.0 (texts) / MIT (code)"
}